name: db-test

on:
  workflow_dispatch:
    inputs:
      docker_ctx:
        description: 'Build context (default: examples/apps/django/)'
        required: false
        type: string
        default: examples/apps/django/

permissions:
  contents: read

env:
  PROVIDER_ID: "projects/595203407878/locations/global/workloadIdentityPools/vul-gh/providers/github-provider"
  SA_EMAIL: "vul-github-actions-user@s3cme1.iam.gserviceaccount.com"
  GO_VERSION: "1.20.4"

jobs:

  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      id-token: write
    steps:

    - name: Setup Go
      uses: actions/setup-go@fac708d6674e30b6ba41289acaab6d4b75aa0753  # v4.0.1
      with:
        go-version: '${{ env.GO_VERSION }}'

    - name: Checkout Code
      uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab  # v3.5.2

    - name: Cache Go Modules
      uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8  # v3.3.1
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install Proxy
      run: |
        go install github.com/GoogleCloudPlatform/cloud-sql-proxy/v2@latest

    - name: Get GCP token
      id: auth
      uses: google-github-actions/auth@35b0e87d162680511bf346c299f71c9c5c379033  # v1.1.1
      with:
        token_format: "access_token"
        workload_identity_provider: ${{ env.PROVIDER_ID }}
        service_account: ${{ env.SA_EMAIL }}

    - name: Start Proxy
      run: cloud-sql-proxy \
        --debug \
        --credentials-file ${{ steps.auth.outputs.access_token }} \
        "s3cme1:us-west1:db?port=5432" &

    - name: Test Connection
      run: |
        psql "host=127.0.0.1 port=5432 sslmode=disable dbname=vimp" -c "SELECT 1;"

    # - name: Setup Keys
    #   run: |
    #     mkdir -p keys
    #     echo "${{ secrets.DB_CLIENT_KEY }}" > keys/private_key.key
    #     echo "${{ secrets.DB_CLIENT_PEM }}" > keys/public_cert.key
    #     echo "${{ secrets.DB_CA_PEM }}" > keys/server_ca.key
    #     chmod 600 keys/*
    #     ls -la keys

    # - name: Setup DB
    #   working-directory: tools/db/sql
    #   env:
    #     PGPASSWORD: test
    #   run: |
    #     PGPASSWORD=$(<"${CONF_DIR}/root_password") psql "sslmode=verify-ca sslrootcert=${CONF_DIR}/ca.pem sslcert=${CONF_DIR}/client.pem sslkey=${CONF_DIR}/client.key hostaddr=${INSTANCE_IP} port=5432 user=postgres dbname=${DB_NAME}"
    #     psql -h localhost -d vimp -U vimp < ddl.sql
    #     psql -h localhost -d vimp -U vimp < test.sql

    # - name: Cleanup Keys
    #   if: always()
    #   run: |
    #     rm -rf keys
