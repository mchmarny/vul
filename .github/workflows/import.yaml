name: import

on:
  workflow_dispatch:
    inputs:
      image_uri:
        description: 'URI of the image to scan/import'
        required: false
        type: string
        default: redis

permissions:
  contents: read

env:
  PROVIDER_ID: "projects/595203407878/locations/global/workloadIdentityPools/vul-gh/providers/github-provider"
  SA_EMAIL: "vul-github-actions-user@s3cme1.iam.gserviceaccount.com"
  GO_VERSION: "1.20.4"

jobs:

  import:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      id-token: write
    steps:

    - name: Setup Go
      uses: actions/setup-go@fac708d6674e30b6ba41289acaab6d4b75aa0753  # v4.0.1
      with:
        go-version: '${{ env.GO_VERSION }}'

    - name: Cache Go Modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Checkout Code
      uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab  # v3.5.2

    - name: Build Importer
      run: make importer

    - name: Install Proxy
      run: |
        go install github.com/GoogleCloudPlatform/cloud-sql-proxy/v2@latest

    - name: Get GCP token
      id: auth
      uses: google-github-actions/auth@35b0e87d162680511bf346c299f71c9c5c379033  # v1.1.1
      with:
        workload_identity_provider: ${{ env.PROVIDER_ID }}
        service_account: ${{ env.SA_EMAIL }}

    - name: Setup gcloud
      uses: google-github-actions/setup-gcloud@e30db14379863a8c79331b04a9969f4c1e225e0b  # v1.1.1

    - name: Get Config
      run: |
        set -euo pipefail
        gcloud secrets versions access "latest" --secret "vul-config" > config.yaml
        echo "DB_HOST=$(yq .store.host < config.yaml)" >> $GITHUB_ENV
        echo "DB_NAME=$(yq .store.db < config.yaml)" >> $GITHUB_ENV
        echo "DB_PASS=$(yq .store.password < config.yaml)" >> $GITHUB_ENV
        echo "SNYK_TOKEN=$(yq .import.snyk_token < config.yaml)" >> $GITHUB_ENV

    - name: Start Proxy
      run: cloud-sql-proxy --debug "${{ env.DB_HOST }}?port=5432" &

    - name: Test Connection
      if: ${{ github.event.inputs.test_connection == 'true' }}
      env:
        PGPASSWORD: ${{ env.DB_PASS }}
      run: |
         psql "host=127.0.0.1 port=5432 sslmode=disable user=postgres dbname=${{ env.DB_NAME }}" -c "SELECT 1;"
